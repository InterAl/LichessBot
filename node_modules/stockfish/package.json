{
  "name": "stockfish",
  "description": "The world's strongest chess engine in pure JavaScript.",
  "version": "6.0.1",
  "author": {
    "name": "Nathan Rugg",
    "email": "nmrugg@gmail.com"
  },
  "dependencies": {},
  "keywords": [
    "chess"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/nmrugg/stockfish.js"
  },
  "license": "GPL",
  "main": "src/stockfish.js",
  "bin": {
    "stockfishjs": "./stockfishjs"
  },
  "readmeFilename": "readme.md",
  "readme": "### Stockfish.js\n\n<a href=\"https://github.com/nmrugg/stockfish.js\">Stockfish.js</a> is a pure JavaScript implementation of <a href=\"https://github.com/mcostalba/Stockfish\">Stockfish</a>, the world's strongest chess engine.\n\nIt currently synced with Stockfish 6.\n\n### API\n\nYou can run Stockfish.js directly from the command line with Node.js.\n\nIn a web browser, Stockfish.js can be run in a web-worker, which can be created like this:\n\n    var stockfish = new Worker(\"stockfish.js\");\n\nIf you don't want to use Web Workers, simply add a script tag, like this:\n\n    <script src=\"stockfish.js\"></script>\n\nThen you can create a new instance by calling the `STOCKFISH()` function.\n\n    var stockfish = STOCKFISH();\n\nInput (standard UCI commands) to the engine is posted as a message to the worker:\n\n    stockfish.postMessage(\"go depth 15\");\n\nThe output of the engine is again posted as a message. To receive it, you need to add a message handler:\n\n    stockfish.onmessage = function(event) {\n        //NOTE: Web Workers wrap the response in an object.\n        console.log(event.data ? event.data : event);\n    };\n\nStockfish.js can be found in the npm repository and installed like this: `npm install stockfish`.\n\nIf you want to use it from the command line, you may want to simply install it globally: `npm install -g stockfish`. Then you can simply run `stockfishjs`.\n\nIn Node.js, you can either run it directly from the command line (i.e., `node src/stockfish.js`) or require() it as a module (i.e., `var stockfish = require(\"stockfish\");`).\n\n### Note about pondering\n\nThe code has been slightly refactored to allow for pondering. However, it can take a long time for Stockfish.js to process the \"stop\" or \"ponderhit\" commands. So it could be dangerous to use in a timed game.\n\nIn the future, it may be improved upon.\n\n### Compiling\n\nYou need to have the <a href=\"https://github.com/kripken/emscripten/\">emscripten</a> compiler installed and in your path. Then you can compile Stockfish.js with the build script: `./build.sh`.\n\n### Example\n\nYou can try out Stockfish.js online <a href=\"https://nmrugg.github.io/kingdom/\">here</a>.\n\nThere are also examples in the example folder. You can either open the example/index.html directly in a web browser or run a small static server to try it out.\nIf you have Node.js, you can start a simple web server in that directory\nlike this: `node server.js`.\n\nThere is also a simple example using Node.js (example/simple_node.js).\n\nAlternatively, you can also run Stockfish.js from the command line via `./stockfish.js` or `node src/stockfish.js`.\n\n### Thanks\n\n<a href=\"https://github.com/mcostalba/Stockfish\">The Stockfish team</a>\n<a href=\"https://github.com/exoticorn/stockfish-js\">exoticorn</a>\n\n### License\nGPL (see Copying.txt)\n",
  "bugs": {
    "url": "https://github.com/nmrugg/stockfish.js/issues"
  },
  "_id": "stockfish@6.0.1",
  "dist": {
    "shasum": "883dabe36132530c51e774f08054b57e0c11d26b"
  },
  "_from": "stockfish@",
  "_resolved": "https://registry.npmjs.org/stockfish/-/stockfish-6.0.1.tgz"
}
